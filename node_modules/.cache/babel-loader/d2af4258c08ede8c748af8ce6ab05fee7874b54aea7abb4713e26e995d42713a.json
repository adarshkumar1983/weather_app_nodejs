{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(4),\n//     backgroundColor: '#f0f3f3',\n//     borderRadius: theme.spacing(2),\n//   },\n//   form: {\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(3),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   weatherItem: {\n//     padding: theme.spacing(2),\n//     border: '2px solid #ccc',\n//     borderRadius: theme.spacing(1),\n//     backgroundColor: '#f9f9f9',\n//     marginBottom: theme.spacing(2),\n//   },\n//   loadingIndicator: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(4),\n//   },\n//   savedLocationsContainer: {\n//     marginTop: theme.spacing(2),\n//     padding: theme.spacing(2),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   savedLocationButton: {\n//     marginRight: theme.spacing(1),\n//     marginBottom: theme.spacing(1),\n//     backgroundColor: '#3f51b5',\n//     color: '#fff',\n//     '&:hover': {\n//       backgroundColor: '#303f9f',\n//     },\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n//   const [savedLocations, setSavedLocations] = useState([]);\n\n//   useEffect(() => {\n//     // Load saved locations from local storage when component mounts\n//     const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n//     if (savedLocationsFromStorage) {\n//       setSavedLocations(JSON.parse(savedLocationsFromStorage));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // Save updated saved locations to local storage whenever it changes\n//     localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n//   }, [savedLocations]);\n\n//   const fetchWeatherData = async () => {\n//     if (!location.trim()) {\n//       setError('Please enter a location.');\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveLocation = () => {\n//     // Save the current location to the list of saved locations\n//     if (location.trim() && !savedLocations.includes(location.trim())) {\n//       setSavedLocations([...savedLocations, location.trim()]);\n//     }\n//   };\n\n//   const handleViewSavedLocation = async (savedLocation) => {\n//     // Fetch weather data for the selected saved location\n//     setLocation(savedLocation);\n//     await fetchWeatherData();\n//   };\n\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   const kelvinToFahrenheit = (kelvin) => {\n//     return (kelvin * 9) / 5 - 459.67;\n//   };\n\n//   const toggleTemperatureUnit = () => {\n//     setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n//   };\n\n//   const aggregateDailyTemperatures = (list) => {\n//     const dailyTemperatures = {};\n\n//     // Loop through the forecast data\n//     list.forEach((item) => {\n//       const forecastDate = new Date(item.dt * 1000);\n//       const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n//       // Check if the date key exists in the dailyTemperatures object\n//       if (!dailyTemperatures[dateKey]) {\n//         // If not, initialize an object for the date\n//         dailyTemperatures[dateKey] = {\n//           max: -Infinity, // Initialize max temperature to negative infinity\n//           min: Infinity, // Initialize min temperature to positive infinity\n//         };\n//       }\n\n//       // Update max temperature if current temperature is higher\n//       if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n//         dailyTemperatures[dateKey].max = item.main.temp_max;\n//       }\n\n//       // Update min temperature if current temperature is lower\n//       if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n//         dailyTemperatures[dateKey].min = item.main.temp_min;\n//       }\n//     });\n\n//     return dailyTemperatures;\n//   };\n\n//   return (\n//     <Container maxWidth=\"md\" className={classes.root}>\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <Paper elevation={3} className={classes.weatherContainer}>\n//         <form\n//           onSubmit={(e) => {\n//             e.preventDefault();\n//             fetchWeatherData();\n//           }}\n//           className={classes.form}\n//         >\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} sm={8}>\n//               <TextField\n//                 label=\"Enter city or coordinates\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={location}\n//                 onChange={(e) => setLocation(e.target.value)}\n//               />\n//             </Grid>\n//             <Grid item xs={12} sm={4}>\n//               <Button\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 type=\"submit\"\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Get Weather\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={handleSaveLocation}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Save Location\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={toggleTemperatureUnit}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Toggle Temperature Unit ({temperatureUnit})\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </form>\n//         {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n//         {loading && (\n//           <div className={classes.loadingIndicator}>\n//             <CircularProgress />\n//           </div>\n//         )}\n//         {currentWeather && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n//             <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         )}\n//         {forecast && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n//             <Grid container spacing={2} justify=\"center\">\n//               {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n//                 <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n//                   <div className={classes.weatherItem}>\n//                     <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n//                     <Typography align=\"center\">{date}</Typography>\n//                     <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n//                     <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n//                   </div>\n//                 </Grid>\n//               ))}\n//             </Grid>\n//           </div>\n//         )}\n//       </Paper>\n//       <Paper elevation={3} className={classes.savedLocationsContainer}>\n//         <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n//         <Grid container spacing={2} justify=\"center\">\n//           {savedLocations.map((savedLocation, index) => (\n//             <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n//               <Button\n//                 variant=\"outlined\"\n//                 onClick={() => handleViewSavedLocation(savedLocation)}\n//                 fullWidth\n//                 className={classes.savedLocationButton}\n//               >\n//                 {savedLocation}\n//               </Button>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;","map":{"version":3,"names":[],"sources":["/Users/adarshkumar/weather-app/src/components/WeatherComponent.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(4),\n//     backgroundColor: '#f0f3f3',\n//     borderRadius: theme.spacing(2),\n//   },\n//   form: {\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(3),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   weatherItem: {\n//     padding: theme.spacing(2),\n//     border: '2px solid #ccc',\n//     borderRadius: theme.spacing(1),\n//     backgroundColor: '#f9f9f9',\n//     marginBottom: theme.spacing(2),\n//   },\n//   loadingIndicator: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(4),\n//   },\n//   savedLocationsContainer: {\n//     marginTop: theme.spacing(2),\n//     padding: theme.spacing(2),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   savedLocationButton: {\n//     marginRight: theme.spacing(1),\n//     marginBottom: theme.spacing(1),\n//     backgroundColor: '#3f51b5',\n//     color: '#fff',\n//     '&:hover': {\n//       backgroundColor: '#303f9f',\n//     },\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n//   const [savedLocations, setSavedLocations] = useState([]);\n\n//   useEffect(() => {\n//     // Load saved locations from local storage when component mounts\n//     const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n//     if (savedLocationsFromStorage) {\n//       setSavedLocations(JSON.parse(savedLocationsFromStorage));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // Save updated saved locations to local storage whenever it changes\n//     localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n//   }, [savedLocations]);\n\n//   const fetchWeatherData = async () => {\n//     if (!location.trim()) {\n//       setError('Please enter a location.');\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveLocation = () => {\n//     // Save the current location to the list of saved locations\n//     if (location.trim() && !savedLocations.includes(location.trim())) {\n//       setSavedLocations([...savedLocations, location.trim()]);\n//     }\n//   };\n\n//   const handleViewSavedLocation = async (savedLocation) => {\n//     // Fetch weather data for the selected saved location\n//     setLocation(savedLocation);\n//     await fetchWeatherData();\n//   };\n\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   const kelvinToFahrenheit = (kelvin) => {\n//     return (kelvin * 9) / 5 - 459.67;\n//   };\n\n//   const toggleTemperatureUnit = () => {\n//     setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n//   };\n\n//   const aggregateDailyTemperatures = (list) => {\n//     const dailyTemperatures = {};\n\n//     // Loop through the forecast data\n//     list.forEach((item) => {\n//       const forecastDate = new Date(item.dt * 1000);\n//       const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n//       // Check if the date key exists in the dailyTemperatures object\n//       if (!dailyTemperatures[dateKey]) {\n//         // If not, initialize an object for the date\n//         dailyTemperatures[dateKey] = {\n//           max: -Infinity, // Initialize max temperature to negative infinity\n//           min: Infinity, // Initialize min temperature to positive infinity\n//         };\n//       }\n\n//       // Update max temperature if current temperature is higher\n//       if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n//         dailyTemperatures[dateKey].max = item.main.temp_max;\n//       }\n\n//       // Update min temperature if current temperature is lower\n//       if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n//         dailyTemperatures[dateKey].min = item.main.temp_min;\n//       }\n//     });\n\n//     return dailyTemperatures;\n//   };\n\n//   return (\n//     <Container maxWidth=\"md\" className={classes.root}>\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <Paper elevation={3} className={classes.weatherContainer}>\n//         <form\n//           onSubmit={(e) => {\n//             e.preventDefault();\n//             fetchWeatherData();\n//           }}\n//           className={classes.form}\n//         >\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} sm={8}>\n//               <TextField\n//                 label=\"Enter city or coordinates\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={location}\n//                 onChange={(e) => setLocation(e.target.value)}\n//               />\n//             </Grid>\n//             <Grid item xs={12} sm={4}>\n//               <Button\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 type=\"submit\"\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Get Weather\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={handleSaveLocation}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Save Location\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={toggleTemperatureUnit}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Toggle Temperature Unit ({temperatureUnit})\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </form>\n//         {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n//         {loading && (\n//           <div className={classes.loadingIndicator}>\n//             <CircularProgress />\n//           </div>\n//         )}\n//         {currentWeather && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n//             <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         )}\n//         {forecast && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n//             <Grid container spacing={2} justify=\"center\">\n//               {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n//                 <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n//                   <div className={classes.weatherItem}>\n//                     <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n//                     <Typography align=\"center\">{date}</Typography>\n//                     <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n//                     <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n//                   </div>\n//                 </Grid>\n//               ))}\n//             </Grid>\n//           </div>\n//         )}\n//       </Paper>\n//       <Paper elevation={3} className={classes.savedLocationsContainer}>\n//         <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n//         <Grid container spacing={2} justify=\"center\">\n//           {savedLocations.map((savedLocation, index) => (\n//             <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n//               <Button\n//                 variant=\"outlined\"\n//                 onClick={() => handleViewSavedLocation(savedLocation)}\n//                 fullWidth\n//                 className={classes.savedLocationButton}\n//               >\n//                 {savedLocation}\n//               </Button>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}