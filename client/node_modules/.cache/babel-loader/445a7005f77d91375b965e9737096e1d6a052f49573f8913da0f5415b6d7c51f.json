{"ast":null,"code":"var _jsxFileName = \"/Users/adarshkumar/weather-app/src/components/WeatherComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(4),\n//     backgroundColor: '#f0f3f3',\n//     borderRadius: theme.spacing(2),\n//   },\n//   form: {\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(3),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   weatherItem: {\n//     padding: theme.spacing(2),\n//     border: '2px solid #ccc',\n//     borderRadius: theme.spacing(1),\n//     backgroundColor: '#f9f9f9',\n//     marginBottom: theme.spacing(2),\n//   },\n//   loadingIndicator: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(4),\n//   },\n//   savedLocationsContainer: {\n//     marginTop: theme.spacing(2),\n//     padding: theme.spacing(2),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   savedLocationButton: {\n//     marginRight: theme.spacing(1),\n//     marginBottom: theme.spacing(1),\n//     backgroundColor: '#3f51b5',\n//     color: '#fff',\n//     '&:hover': {\n//       backgroundColor: '#303f9f',\n//     },\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n//   const [savedLocations, setSavedLocations] = useState([]);\n\n//   useEffect(() => {\n//     // Load saved locations from local storage when component mounts\n//     const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n//     if (savedLocationsFromStorage) {\n//       setSavedLocations(JSON.parse(savedLocationsFromStorage));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // Save updated saved locations to local storage whenever it changes\n//     localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n//   }, [savedLocations]);\n\n//   const fetchWeatherData = async () => {\n//     if (!location.trim()) {\n//       setError('Please enter a location.');\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveLocation = () => {\n//     // Save the current location to the list of saved locations\n//     if (location.trim() && !savedLocations.includes(location.trim())) {\n//       setSavedLocations([...savedLocations, location.trim()]);\n//     }\n//   };\n\n//   const handleViewSavedLocation = async (savedLocation) => {\n//     // Fetch weather data for the selected saved location\n//     setLocation(savedLocation);\n//     await fetchWeatherData();\n//   };\n\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   const kelvinToFahrenheit = (kelvin) => {\n//     return (kelvin * 9) / 5 - 459.67;\n//   };\n\n//   const toggleTemperatureUnit = () => {\n//     setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n//   };\n\n//   const aggregateDailyTemperatures = (list) => {\n//     const dailyTemperatures = {};\n\n//     // Loop through the forecast data\n//     list.forEach((item) => {\n//       const forecastDate = new Date(item.dt * 1000);\n//       const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n//       // Check if the date key exists in the dailyTemperatures object\n//       if (!dailyTemperatures[dateKey]) {\n//         // If not, initialize an object for the date\n//         dailyTemperatures[dateKey] = {\n//           max: -Infinity, // Initialize max temperature to negative infinity\n//           min: Infinity, // Initialize min temperature to positive infinity\n//         };\n//       }\n\n//       // Update max temperature if current temperature is higher\n//       if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n//         dailyTemperatures[dateKey].max = item.main.temp_max;\n//       }\n\n//       // Update min temperature if current temperature is lower\n//       if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n//         dailyTemperatures[dateKey].min = item.main.temp_min;\n//       }\n//     });\n\n//     return dailyTemperatures;\n//   };\n\n//   return (\n//     <Container maxWidth=\"md\" className={classes.root}>\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <Paper elevation={3} className={classes.weatherContainer}>\n//         <form\n//           onSubmit={(e) => {\n//             e.preventDefault();\n//             fetchWeatherData();\n//           }}\n//           className={classes.form}\n//         >\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} sm={8}>\n//               <TextField\n//                 label=\"Enter city or coordinates\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={location}\n//                 onChange={(e) => setLocation(e.target.value)}\n//               />\n//             </Grid>\n//             <Grid item xs={12} sm={4}>\n//               <Button\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 type=\"submit\"\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Get Weather\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={handleSaveLocation}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Save Location\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={toggleTemperatureUnit}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Toggle Temperature Unit ({temperatureUnit})\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </form>\n//         {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n//         {loading && (\n//           <div className={classes.loadingIndicator}>\n//             <CircularProgress />\n//           </div>\n//         )}\n//         {currentWeather && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n//             <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         )}\n//         {forecast && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n//             <Grid container spacing={2} justify=\"center\">\n//               {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n//                 <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n//                   <div className={classes.weatherItem}>\n//                     <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n//                     <Typography align=\"center\">{date}</Typography>\n//                     <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n//                     <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n//                   </div>\n//                 </Grid>\n//               ))}\n//             </Grid>\n//           </div>\n//         )}\n//       </Paper>\n//       <Paper elevation={3} className={classes.savedLocationsContainer}>\n//         <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n//         <Grid container spacing={2} justify=\"center\">\n//           {savedLocations.map((savedLocation, index) => (\n//             <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n//               <Button\n//                 variant=\"outlined\"\n//                 onClick={() => handleViewSavedLocation(savedLocation)}\n//                 fullWidth\n//                 className={classes.savedLocationButton}\n//               >\n//                 {savedLocation}\n//               </Button>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(4),\n    backgroundColor: '#f0f3f3',\n    borderRadius: theme.spacing(2)\n  },\n  form: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center'\n  },\n  textField: {\n    marginRight: theme.spacing(2),\n    flex: 1\n  },\n  button: {\n    marginLeft: theme.spacing(2)\n  },\n  weatherContainer: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(3),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)'\n  },\n  weatherItem: {\n    padding: theme.spacing(2),\n    border: '2px solid #ccc',\n    borderRadius: theme.spacing(1),\n    backgroundColor: '#f9f9f9',\n    marginBottom: theme.spacing(2)\n  },\n  loadingIndicator: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(4)\n  },\n  savedLocationsContainer: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)'\n  },\n  savedLocationButton: {\n    marginRight: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f'\n    }\n  }\n}));\nconst WeatherApp = () => {\n  _s();\n  const classes = useStyles();\n  const [location, setLocation] = useState('');\n  const [forecast, setForecast] = useState(null);\n  const [error, setError] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n  const [savedLocations, setSavedLocations] = useState([]);\n  useEffect(() => {\n    // Load saved locations from local storage when component mounts\n    const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n    if (savedLocationsFromStorage) {\n      setSavedLocations(JSON.parse(savedLocationsFromStorage));\n    }\n  }, []);\n  useEffect(() => {\n    // Save updated saved locations to local storage whenever it changes\n    localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n  }, [savedLocations]);\n  const fetchWeatherData = async () => {\n    if (!location.trim()) {\n      setError('Please enter a location.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n      setCurrentWeather(response.data.currentWeather);\n      setForecast(response.data.forecast);\n      setError('');\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      setError('Failed to fetch weather data. Please try again.');\n      setLoading(false);\n    }\n  };\n  const handleSaveLocation = () => {\n    // Save the current location to the list of saved locations\n    if (location.trim() && !savedLocations.includes(location.trim())) {\n      setSavedLocations([...savedLocations, location.trim()]);\n    }\n  };\n  const handleViewSavedLocation = async savedLocation => {\n    // Fetch weather data for the selected saved location\n    setLocation(savedLocation);\n    await fetchWeatherData();\n  };\n  const kelvinToCelsius = kelvin => {\n    return kelvin - 273.15;\n  };\n  const kelvinToFahrenheit = kelvin => {\n    return kelvin * 9 / 5 - 459.67;\n  };\n  const toggleTemperatureUnit = () => {\n    setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n  };\n  const aggregateDailyTemperatures = list => {\n    const dailyTemperatures = {};\n\n    // Loop through the forecast data\n    list.forEach(item => {\n      const forecastDate = new Date(item.dt * 1000);\n      const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n      // Check if the date key exists in the dailyTemperatures object\n      if (!dailyTemperatures[dateKey]) {\n        // If not, initialize an object for the date\n        dailyTemperatures[dateKey] = {\n          max: -Infinity,\n          // Initialize max temperature to negative infinity\n          min: Infinity // Initialize min temperature to positive infinity\n        };\n      }\n\n      // Update max temperature if current temperature is higher\n      if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n        dailyTemperatures[dateKey].max = item.main.temp_max;\n      }\n\n      // Update min temperature if current temperature is lower\n      if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n        dailyTemperatures[dateKey].min = item.main.temp_min;\n      }\n    });\n    return dailyTemperatures;\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      gutterBottom: true,\n      align: \"center\",\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      className: classes.weatherContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          fetchWeatherData();\n        },\n        className: classes.form,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 8,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Enter city or coordinates\",\n              variant: \"outlined\",\n              fullWidth: true,\n              value: location,\n              onChange: e => setLocation(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 4,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              fullWidth: true,\n              className: classes.button,\n              children: \"Get Weather\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              onClick: handleSaveLocation,\n              fullWidth: true,\n              className: classes.button,\n              children: \"Save Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              onClick: toggleTemperatureUnit,\n              fullWidth: true,\n              className: classes.button,\n              children: [\"Toggle Temperature Unit (\", temperatureUnit, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        align: \"center\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 19\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.loadingIndicator,\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this), currentWeather && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.weatherItem,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          variant: \"h5\",\n          children: \"Current Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          children: [\"Temperature: \", temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          children: [\"Description: \", currentWeather.weather[0].description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this), forecast && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.weatherItem,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          variant: \"h5\",\n          children: \"5-Day Weather Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          justify: \"center\",\n          children: Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 3,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.weatherItem,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                align: \"center\",\n                variant: \"h6\",\n                children: new Date(date).toLocaleDateString('en-US', {\n                  weekday: 'short'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                align: \"center\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                align: \"center\",\n                children: [\"Max: \", temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                align: \"center\",\n                children: [\"Min: \", temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 19\n            }, this)\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      className: classes.savedLocationsContainer,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        align: \"center\",\n        children: \"Saved Locations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        justify: \"center\",\n        children: savedLocations.map((savedLocation, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          lg: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => handleViewSavedLocation(savedLocation),\n            fullWidth: true,\n            className: classes.savedLocationButton,\n            children: savedLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"dmleZMgPsK2R6HhA0jRe4yFPHsk=\", false, function () {\n  return [useStyles];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","TextField","Button","Typography","makeStyles","Grid","CircularProgress","Paper","jsxDEV","_jsxDEV","useStyles","theme","root","marginTop","spacing","marginBottom","padding","backgroundColor","borderRadius","form","display","alignItems","textField","marginRight","flex","button","marginLeft","weatherContainer","boxShadow","weatherItem","border","loadingIndicator","justifyContent","savedLocationsContainer","savedLocationButton","color","WeatherApp","_s","classes","location","setLocation","forecast","setForecast","error","setError","currentWeather","setCurrentWeather","loading","setLoading","temperatureUnit","setTemperatureUnit","savedLocations","setSavedLocations","savedLocationsFromStorage","localStorage","getItem","JSON","parse","setItem","stringify","fetchWeatherData","trim","response","get","data","console","handleSaveLocation","includes","handleViewSavedLocation","savedLocation","kelvinToCelsius","kelvin","kelvinToFahrenheit","toggleTemperatureUnit","prevUnit","aggregateDailyTemperatures","list","dailyTemperatures","forEach","item","forecastDate","Date","dt","dateKey","toISOString","split","max","Infinity","min","main","temp_max","temp_min","maxWidth","className","children","variant","gutterBottom","align","fileName","_jsxFileName","lineNumber","columnNumber","elevation","onSubmit","e","preventDefault","container","xs","sm","label","fullWidth","value","onChange","target","type","onClick","temp","toFixed","weather","description","justify","Object","entries","map","date","temperatures","md","lg","toLocaleDateString","weekday","index","_c","$RefreshReg$"],"sources":["/Users/adarshkumar/weather-app/src/components/WeatherComponent.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(4),\n//     backgroundColor: '#f0f3f3',\n//     borderRadius: theme.spacing(2),\n//   },\n//   form: {\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(3),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   weatherItem: {\n//     padding: theme.spacing(2),\n//     border: '2px solid #ccc',\n//     borderRadius: theme.spacing(1),\n//     backgroundColor: '#f9f9f9',\n//     marginBottom: theme.spacing(2),\n//   },\n//   loadingIndicator: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(4),\n//   },\n//   savedLocationsContainer: {\n//     marginTop: theme.spacing(2),\n//     padding: theme.spacing(2),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   savedLocationButton: {\n//     marginRight: theme.spacing(1),\n//     marginBottom: theme.spacing(1),\n//     backgroundColor: '#3f51b5',\n//     color: '#fff',\n//     '&:hover': {\n//       backgroundColor: '#303f9f',\n//     },\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n//   const [savedLocations, setSavedLocations] = useState([]);\n\n//   useEffect(() => {\n//     // Load saved locations from local storage when component mounts\n//     const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n//     if (savedLocationsFromStorage) {\n//       setSavedLocations(JSON.parse(savedLocationsFromStorage));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // Save updated saved locations to local storage whenever it changes\n//     localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n//   }, [savedLocations]);\n\n//   const fetchWeatherData = async () => {\n//     if (!location.trim()) {\n//       setError('Please enter a location.');\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveLocation = () => {\n//     // Save the current location to the list of saved locations\n//     if (location.trim() && !savedLocations.includes(location.trim())) {\n//       setSavedLocations([...savedLocations, location.trim()]);\n//     }\n//   };\n\n//   const handleViewSavedLocation = async (savedLocation) => {\n//     // Fetch weather data for the selected saved location\n//     setLocation(savedLocation);\n//     await fetchWeatherData();\n//   };\n\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   const kelvinToFahrenheit = (kelvin) => {\n//     return (kelvin * 9) / 5 - 459.67;\n//   };\n\n//   const toggleTemperatureUnit = () => {\n//     setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n//   };\n\n//   const aggregateDailyTemperatures = (list) => {\n//     const dailyTemperatures = {};\n\n//     // Loop through the forecast data\n//     list.forEach((item) => {\n//       const forecastDate = new Date(item.dt * 1000);\n//       const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n//       // Check if the date key exists in the dailyTemperatures object\n//       if (!dailyTemperatures[dateKey]) {\n//         // If not, initialize an object for the date\n//         dailyTemperatures[dateKey] = {\n//           max: -Infinity, // Initialize max temperature to negative infinity\n//           min: Infinity, // Initialize min temperature to positive infinity\n//         };\n//       }\n\n//       // Update max temperature if current temperature is higher\n//       if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n//         dailyTemperatures[dateKey].max = item.main.temp_max;\n//       }\n\n//       // Update min temperature if current temperature is lower\n//       if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n//         dailyTemperatures[dateKey].min = item.main.temp_min;\n//       }\n//     });\n\n//     return dailyTemperatures;\n//   };\n\n//   return (\n//     <Container maxWidth=\"md\" className={classes.root}>\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <Paper elevation={3} className={classes.weatherContainer}>\n//         <form\n//           onSubmit={(e) => {\n//             e.preventDefault();\n//             fetchWeatherData();\n//           }}\n//           className={classes.form}\n//         >\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} sm={8}>\n//               <TextField\n//                 label=\"Enter city or coordinates\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={location}\n//                 onChange={(e) => setLocation(e.target.value)}\n//               />\n//             </Grid>\n//             <Grid item xs={12} sm={4}>\n//               <Button\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 type=\"submit\"\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Get Weather\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={handleSaveLocation}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Save Location\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={toggleTemperatureUnit}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Toggle Temperature Unit ({temperatureUnit})\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </form>\n//         {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n//         {loading && (\n//           <div className={classes.loadingIndicator}>\n//             <CircularProgress />\n//           </div>\n//         )}\n//         {currentWeather && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n//             <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         )}\n//         {forecast && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n//             <Grid container spacing={2} justify=\"center\">\n//               {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n//                 <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n//                   <div className={classes.weatherItem}>\n//                     <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n//                     <Typography align=\"center\">{date}</Typography>\n//                     <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n//                     <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n//                   </div>\n//                 </Grid>\n//               ))}\n//             </Grid>\n//           </div>\n//         )}\n//       </Paper>\n//       <Paper elevation={3} className={classes.savedLocationsContainer}>\n//         <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n//         <Grid container spacing={2} justify=\"center\">\n//           {savedLocations.map((savedLocation, index) => (\n//             <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n//               <Button\n//                 variant=\"outlined\"\n//                 onClick={() => handleViewSavedLocation(savedLocation)}\n//                 fullWidth\n//                 className={classes.savedLocationButton}\n//               >\n//                 {savedLocation}\n//               </Button>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(4),\n    backgroundColor: '#f0f3f3',\n    borderRadius: theme.spacing(2),\n  },\n  form: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center',\n  },\n  textField: {\n    marginRight: theme.spacing(2),\n    flex: 1,\n  },\n  button: {\n    marginLeft: theme.spacing(2),\n  },\n  weatherContainer: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(3),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n  },\n  weatherItem: {\n    padding: theme.spacing(2),\n    border: '2px solid #ccc',\n    borderRadius: theme.spacing(1),\n    backgroundColor: '#f9f9f9',\n    marginBottom: theme.spacing(2),\n  },\n  loadingIndicator: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(4),\n  },\n  savedLocationsContainer: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n  },\n  savedLocationButton: {\n    marginRight: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n}));\n\nconst WeatherApp = () => {\n  const classes = useStyles();\n  const [location, setLocation] = useState('');\n  const [forecast, setForecast] = useState(null);\n  const [error, setError] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n  const [savedLocations, setSavedLocations] = useState([]);\n\n  useEffect(() => {\n    // Load saved locations from local storage when component mounts\n    const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n    if (savedLocationsFromStorage) {\n      setSavedLocations(JSON.parse(savedLocationsFromStorage));\n    }\n  }, []);\n\n  useEffect(() => {\n    // Save updated saved locations to local storage whenever it changes\n    localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n  }, [savedLocations]);\n\n  const fetchWeatherData = async () => {\n    if (!location.trim()) {\n      setError('Please enter a location.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n      setCurrentWeather(response.data.currentWeather);\n      setForecast(response.data.forecast);\n      setError('');\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      setError('Failed to fetch weather data. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  const handleSaveLocation = () => {\n    // Save the current location to the list of saved locations\n    if (location.trim() && !savedLocations.includes(location.trim())) {\n      setSavedLocations([...savedLocations, location.trim()]);\n    }\n  };\n\n  const handleViewSavedLocation = async (savedLocation) => {\n    // Fetch weather data for the selected saved location\n    setLocation(savedLocation);\n    await fetchWeatherData();\n  };\n\n  const kelvinToCelsius = (kelvin) => {\n    return kelvin - 273.15;\n  };\n\n  const kelvinToFahrenheit = (kelvin) => {\n    return (kelvin * 9) / 5 - 459.67;\n  };\n\n  const toggleTemperatureUnit = () => {\n    setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n  };\n\n  const aggregateDailyTemperatures = (list) => {\n    const dailyTemperatures = {};\n\n    // Loop through the forecast data\n    list.forEach((item) => {\n      const forecastDate = new Date(item.dt * 1000);\n      const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n      // Check if the date key exists in the dailyTemperatures object\n      if (!dailyTemperatures[dateKey]) {\n        // If not, initialize an object for the date\n        dailyTemperatures[dateKey] = {\n          max: -Infinity, // Initialize max temperature to negative infinity\n          min: Infinity, // Initialize min temperature to positive infinity\n        };\n      }\n\n      // Update max temperature if current temperature is higher\n      if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n        dailyTemperatures[dateKey].max = item.main.temp_max;\n      }\n\n      // Update min temperature if current temperature is lower\n      if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n        dailyTemperatures[dateKey].min = item.main.temp_min;\n      }\n    });\n\n    return dailyTemperatures;\n  };\n\n  return (\n    <Container maxWidth=\"md\" className={classes.root}>\n      <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n      <Paper elevation={3} className={classes.weatherContainer}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            fetchWeatherData();\n          }}\n          className={classes.form}\n        >\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} sm={8}>\n              <TextField\n                label=\"Enter city or coordinates\"\n                variant=\"outlined\"\n                fullWidth\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                fullWidth\n                className={classes.button}\n              >\n                Get Weather\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleSaveLocation}\n                fullWidth\n                className={classes.button}\n              >\n                Save Location\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={toggleTemperatureUnit}\n                fullWidth\n                className={classes.button}\n              >\n                Toggle Temperature Unit ({temperatureUnit})\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n        {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n        {loading && (\n          <div className={classes.loadingIndicator}>\n            <CircularProgress />\n          </div>\n        )}\n        {currentWeather && (\n          <div className={classes.weatherItem}>\n            <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n            <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n            <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n          </div>\n        )}\n        {forecast && (\n          <div className={classes.weatherItem}>\n            <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n            <Grid container spacing={2} justify=\"center\">\n              {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n                <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n                  <div className={classes.weatherItem}>\n                    <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n                    <Typography align=\"center\">{date}</Typography>\n                    <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n                    <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n                  </div>\n                </Grid>\n              ))}\n            </Grid>\n          </div>\n        )}\n      </Paper>\n      <Paper elevation={3} className={classes.savedLocationsContainer}>\n        <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n        <Grid container spacing={2} justify=\"center\">\n          {savedLocations.map((savedLocation, index) => (\n            <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n              <Button\n                variant=\"outlined\"\n                onClick={() => handleViewSavedLocation(savedLocation)}\n                fullWidth\n                className={classes.savedLocationButton}\n              >\n                {savedLocation}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default WeatherApp;\n\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}