{"ast":null,"code":"var _jsxFileName = \"/Users/adarshkumar/weather-app/src/components/WeatherComponent.js\",\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(4),\n//     backgroundColor: '#f0f3f3',\n//     borderRadius: theme.spacing(2),\n//   },\n//   form: {\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(3),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   weatherItem: {\n//     padding: theme.spacing(2),\n//     border: '2px solid #ccc',\n//     borderRadius: theme.spacing(1),\n//     backgroundColor: '#f9f9f9',\n//     marginBottom: theme.spacing(2),\n//   },\n//   loadingIndicator: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(4),\n//   },\n//   savedLocationsContainer: {\n//     marginTop: theme.spacing(2),\n//     padding: theme.spacing(2),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   savedLocationButton: {\n//     marginRight: theme.spacing(1),\n//     marginBottom: theme.spacing(1),\n//     backgroundColor: '#3f51b5',\n//     color: '#fff',\n//     '&:hover': {\n//       backgroundColor: '#303f9f',\n//     },\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n//   const [savedLocations, setSavedLocations] = useState([]);\n\n//   useEffect(() => {\n//     // Load saved locations from local storage when component mounts\n//     const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n//     if (savedLocationsFromStorage) {\n//       setSavedLocations(JSON.parse(savedLocationsFromStorage));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // Save updated saved locations to local storage whenever it changes\n//     localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n//   }, [savedLocations]);\n\n//   const fetchWeatherData = async () => {\n//     if (!location.trim()) {\n//       setError('Please enter a location.');\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveLocation = () => {\n//     // Save the current location to the list of saved locations\n//     if (location.trim() && !savedLocations.includes(location.trim())) {\n//       setSavedLocations([...savedLocations, location.trim()]);\n//     }\n//   };\n\n//   const handleViewSavedLocation = async (savedLocation) => {\n//     // Fetch weather data for the selected saved location\n//     setLocation(savedLocation);\n//     await fetchWeatherData();\n//   };\n\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   const kelvinToFahrenheit = (kelvin) => {\n//     return (kelvin * 9) / 5 - 459.67;\n//   };\n\n//   const toggleTemperatureUnit = () => {\n//     setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n//   };\n\n//   const aggregateDailyTemperatures = (list) => {\n//     const dailyTemperatures = {};\n\n//     // Loop through the forecast data\n//     list.forEach((item) => {\n//       const forecastDate = new Date(item.dt * 1000);\n//       const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n//       // Check if the date key exists in the dailyTemperatures object\n//       if (!dailyTemperatures[dateKey]) {\n//         // If not, initialize an object for the date\n//         dailyTemperatures[dateKey] = {\n//           max: -Infinity, // Initialize max temperature to negative infinity\n//           min: Infinity, // Initialize min temperature to positive infinity\n//         };\n//       }\n\n//       // Update max temperature if current temperature is higher\n//       if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n//         dailyTemperatures[dateKey].max = item.main.temp_max;\n//       }\n\n//       // Update min temperature if current temperature is lower\n//       if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n//         dailyTemperatures[dateKey].min = item.main.temp_min;\n//       }\n//     });\n\n//     return dailyTemperatures;\n//   };\n\n//   return (\n//     <Container maxWidth=\"md\" className={classes.root}>\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <Paper elevation={3} className={classes.weatherContainer}>\n//         <form\n//           onSubmit={(e) => {\n//             e.preventDefault();\n//             fetchWeatherData();\n//           }}\n//           className={classes.form}\n//         >\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} sm={8}>\n//               <TextField\n//                 label=\"Enter city or coordinates\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={location}\n//                 onChange={(e) => setLocation(e.target.value)}\n//               />\n//             </Grid>\n//             <Grid item xs={12} sm={4}>\n//               <Button\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 type=\"submit\"\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Get Weather\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={handleSaveLocation}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Save Location\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={toggleTemperatureUnit}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Toggle Temperature Unit ({temperatureUnit})\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </form>\n//         {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n//         {loading && (\n//           <div className={classes.loadingIndicator}>\n//             <CircularProgress />\n//           </div>\n//         )}\n//         {currentWeather && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n//             <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         )}\n//         {forecast && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n//             <Grid container spacing={2} justify=\"center\">\n//               {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n//                 <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n//                   <div className={classes.weatherItem}>\n//                     <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n//                     <Typography align=\"center\">{date}</Typography>\n//                     <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n//                     <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n//                   </div>\n//                 </Grid>\n//               ))}\n//             </Grid>\n//           </div>\n//         )}\n//       </Paper>\n//       <Paper elevation={3} className={classes.savedLocationsContainer}>\n//         <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n//         <Grid container spacing={2} justify=\"center\">\n//           {savedLocations.map((savedLocation, index) => (\n//             <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n//               <Button\n//                 variant=\"outlined\"\n//                 onClick={() => handleViewSavedLocation(savedLocation)}\n//                 fullWidth\n//                 className={classes.savedLocationButton}\n//               >\n//                 {savedLocation}\n//               </Button>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(4),\n    backgroundColor: '#f0f3f3',\n    borderRadius: theme.spacing(2)\n  },\n  form: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center'\n  },\n  textField: {\n    marginRight: theme.spacing(2),\n    flex: 1\n  },\n  button: {\n    marginLeft: theme.spacing(2)\n  },\n  weatherContainer: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(3),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)'\n  },\n  weatherItem: {\n    padding: theme.spacing(2),\n    border: '2px solid #ccc',\n    borderRadius: theme.spacing(1),\n    backgroundColor: '#f9f9f9',\n    marginBottom: theme.spacing(2)\n  },\n  loadingIndicator: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(4)\n  },\n  savedLocationsContainer: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)'\n  },\n  savedLocationButton: {\n    marginRight: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f'\n    }\n  }\n}));\nconst WeatherApp = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const classes = useStyles();\n  const [location, setLocation] = useState('');\n  const [forecast, setForecast] = useState(null);\n  const [error, setError] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n  const [savedLocations, setSavedLocations] = useState([]);\n  const WeatherApp = () => {\n    _s();\n    const classes = useStyles();\n    const [location, setLocation] = useState('');\n    const [forecast, setForecast] = useState(null);\n    const [error, setError] = useState('');\n    const [currentWeather, setCurrentWeather] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n    const [savedLocations, setSavedLocations] = useState([]);\n    useEffect(() => {\n      // Load saved locations from local storage when component mounts\n      const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n      if (savedLocationsFromStorage) {\n        setSavedLocations(JSON.parse(savedLocationsFromStorage));\n      }\n    }, []);\n    useEffect(() => {\n      // Save updated saved locations to local storage whenever it changes\n      localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n    }, [savedLocations]);\n    const fetchWeatherData = async location => {\n      if (!location.trim()) {\n        setError('Please enter a location.');\n        return;\n      }\n      try {\n        setLoading(true);\n        const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n        setCurrentWeather(response.data.currentWeather);\n        setForecast(response.data.forecast);\n        setError('');\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n        setError('Failed to fetch weather data. Please try again.');\n        setLoading(false);\n      }\n    };\n    const fetchCurrentLocationWeather = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const location = `${latitude},${longitude}`;\n          await fetchWeatherData(location);\n        }, error => {\n          console.error('Error getting current location:', error);\n          setError('Failed to get current location. Please enter a location manually.');\n          setLoading(false);\n        });\n      } else {\n        setError('Geolocation is not supported by this browser.');\n      }\n    };\n    const handleFetchCurrentLocationWeather = async () => {\n      setLoading(true);\n      await fetchCurrentLocationWeather();\n    };\n    const handleSaveLocation = () => {\n      // Save the current location to the list of saved locations\n      if (location.trim() && !savedLocations.includes(location.trim())) {\n        setSavedLocations([...savedLocations, location.trim()]);\n      }\n    };\n    const handleViewSavedLocation = async savedLocation => {\n      // Fetch weather data for the selected saved location\n      setLocation(savedLocation);\n      await fetchWeatherData();\n    };\n    const kelvinToCelsius = kelvin => {\n      return kelvin - 273.15;\n    };\n    const kelvinToFahrenheit = kelvin => {\n      return kelvin * 9 / 5 - 459.67;\n    };\n    const toggleTemperatureUnit = () => {\n      setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n    };\n    const aggregateDailyTemperatures = list => {\n      const dailyTemperatures = {};\n\n      // Loop through the forecast data\n      list.forEach(item => {\n        const forecastDate = new Date(item.dt * 1000);\n        const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n        // Check if the date key exists in the dailyTemperatures object\n        if (!dailyTemperatures[dateKey]) {\n          // If not, initialize an object for the date\n          dailyTemperatures[dateKey] = {\n            max: -Infinity,\n            // Initialize max temperature to negative infinity\n            min: Infinity // Initialize min temperature to positive infinity\n          };\n        }\n\n        // Update max temperature if current temperature is higher\n        if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n          dailyTemperatures[dateKey].max = item.main.temp_max;\n        }\n\n        // Update min temperature if current temperature is lower\n        if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n          dailyTemperatures[dateKey].min = item.main.temp_min;\n        }\n      });\n      return dailyTemperatures;\n    };\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        gutterBottom: true,\n        align: \"center\",\n        children: \"Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        className: classes.weatherContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            e.preventDefault();\n            fetchWeatherData();\n          },\n          className: classes.form,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 8,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Enter city or coordinates\",\n                variant: \"outlined\",\n                fullWidth: true,\n                value: location,\n                onChange: e => setLocation(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 4,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                type: \"submit\",\n                fullWidth: true,\n                className: classes.button,\n                children: \"Get Weather\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"primary\",\n                onClick: handleSaveLocation,\n                fullWidth: true,\n                className: classes.button,\n                children: \"Save Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"primary\",\n                onClick: toggleTemperatureUnit,\n                fullWidth: true,\n                className: classes.button,\n                children: [\"Toggle Temperature Unit (\", temperatureUnit, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 9\n        }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          align: \"center\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 19\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.loadingIndicator,\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), currentWeather && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.weatherItem,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            variant: \"h5\",\n            children: \"Current Weather\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            children: [\"Temperature: \", temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            children: [\"Description: \", currentWeather.weather[0].description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), forecast && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.weatherItem,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            variant: \"h5\",\n            children: \"5-Day Weather Forecast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            justify: \"center\",\n            children: Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 4,\n              lg: 3,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.weatherItem,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  align: \"center\",\n                  variant: \"h6\",\n                  children: new Date(date).toLocaleDateString('en-US', {\n                    weekday: 'short'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 539,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  align: \"center\",\n                  children: date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 540,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  align: \"center\",\n                  children: [\"Max: \", temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 541,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  align: \"center\",\n                  children: [\"Min: \", temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 19\n              }, this)\n            }, date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        className: classes.savedLocationsContainer,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          gutterBottom: true,\n          align: \"center\",\n          children: \"Saved Locations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          justify: \"center\",\n          children: savedLocations.map((savedLocation, index) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 3,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              onClick: () => handleViewSavedLocation(savedLocation),\n              fullWidth: true,\n              className: classes.savedLocationButton,\n              children: savedLocation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 5\n    }, this);\n  };\n  _s(WeatherApp, \"dmleZMgPsK2R6HhA0jRe4yFPHsk=\", false, function () {\n    return [useStyles];\n  });\n};\n_s2(WeatherApp, \"ccz+UNuhTfkLzmMH2FSaMS9g4HY=\", false, function () {\n  return [useStyles];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","TextField","Button","Typography","makeStyles","Grid","CircularProgress","Paper","jsxDEV","_jsxDEV","useStyles","theme","root","marginTop","spacing","marginBottom","padding","backgroundColor","borderRadius","form","display","alignItems","textField","marginRight","flex","button","marginLeft","weatherContainer","boxShadow","weatherItem","border","loadingIndicator","justifyContent","savedLocationsContainer","savedLocationButton","color","WeatherApp","_s2","_s","$RefreshSig$","classes","location","setLocation","forecast","setForecast","error","setError","currentWeather","setCurrentWeather","loading","setLoading","temperatureUnit","setTemperatureUnit","savedLocations","setSavedLocations","savedLocationsFromStorage","localStorage","getItem","JSON","parse","setItem","stringify","fetchWeatherData","trim","response","get","data","console","fetchCurrentLocationWeather","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","handleFetchCurrentLocationWeather","handleSaveLocation","includes","handleViewSavedLocation","savedLocation","kelvinToCelsius","kelvin","kelvinToFahrenheit","toggleTemperatureUnit","prevUnit","aggregateDailyTemperatures","list","dailyTemperatures","forEach","item","forecastDate","Date","dt","dateKey","toISOString","split","max","Infinity","min","main","temp_max","temp_min","maxWidth","className","children","variant","gutterBottom","align","fileName","_jsxFileName","lineNumber","columnNumber","elevation","onSubmit","e","preventDefault","container","xs","sm","label","fullWidth","value","onChange","target","type","onClick","temp","toFixed","weather","description","justify","Object","entries","map","date","temperatures","md","lg","toLocaleDateString","weekday","index","_c","$RefreshReg$"],"sources":["/Users/adarshkumar/weather-app/src/components/WeatherComponent.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(4),\n//     backgroundColor: '#f0f3f3',\n//     borderRadius: theme.spacing(2),\n//   },\n//   form: {\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//     marginBottom: theme.spacing(4),\n//     padding: theme.spacing(3),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   weatherItem: {\n//     padding: theme.spacing(2),\n//     border: '2px solid #ccc',\n//     borderRadius: theme.spacing(1),\n//     backgroundColor: '#f9f9f9',\n//     marginBottom: theme.spacing(2),\n//   },\n//   loadingIndicator: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(4),\n//   },\n//   savedLocationsContainer: {\n//     marginTop: theme.spacing(2),\n//     padding: theme.spacing(2),\n//     borderRadius: theme.spacing(2),\n//     boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n//   },\n//   savedLocationButton: {\n//     marginRight: theme.spacing(1),\n//     marginBottom: theme.spacing(1),\n//     backgroundColor: '#3f51b5',\n//     color: '#fff',\n//     '&:hover': {\n//       backgroundColor: '#303f9f',\n//     },\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n//   const [savedLocations, setSavedLocations] = useState([]);\n\n//   useEffect(() => {\n//     // Load saved locations from local storage when component mounts\n//     const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n//     if (savedLocationsFromStorage) {\n//       setSavedLocations(JSON.parse(savedLocationsFromStorage));\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // Save updated saved locations to local storage whenever it changes\n//     localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n//   }, [savedLocations]);\n\n//   const fetchWeatherData = async () => {\n//     if (!location.trim()) {\n//       setError('Please enter a location.');\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSaveLocation = () => {\n//     // Save the current location to the list of saved locations\n//     if (location.trim() && !savedLocations.includes(location.trim())) {\n//       setSavedLocations([...savedLocations, location.trim()]);\n//     }\n//   };\n\n//   const handleViewSavedLocation = async (savedLocation) => {\n//     // Fetch weather data for the selected saved location\n//     setLocation(savedLocation);\n//     await fetchWeatherData();\n//   };\n\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   const kelvinToFahrenheit = (kelvin) => {\n//     return (kelvin * 9) / 5 - 459.67;\n//   };\n\n//   const toggleTemperatureUnit = () => {\n//     setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n//   };\n\n//   const aggregateDailyTemperatures = (list) => {\n//     const dailyTemperatures = {};\n\n//     // Loop through the forecast data\n//     list.forEach((item) => {\n//       const forecastDate = new Date(item.dt * 1000);\n//       const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n//       // Check if the date key exists in the dailyTemperatures object\n//       if (!dailyTemperatures[dateKey]) {\n//         // If not, initialize an object for the date\n//         dailyTemperatures[dateKey] = {\n//           max: -Infinity, // Initialize max temperature to negative infinity\n//           min: Infinity, // Initialize min temperature to positive infinity\n//         };\n//       }\n\n//       // Update max temperature if current temperature is higher\n//       if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n//         dailyTemperatures[dateKey].max = item.main.temp_max;\n//       }\n\n//       // Update min temperature if current temperature is lower\n//       if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n//         dailyTemperatures[dateKey].min = item.main.temp_min;\n//       }\n//     });\n\n//     return dailyTemperatures;\n//   };\n\n//   return (\n//     <Container maxWidth=\"md\" className={classes.root}>\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <Paper elevation={3} className={classes.weatherContainer}>\n//         <form\n//           onSubmit={(e) => {\n//             e.preventDefault();\n//             fetchWeatherData();\n//           }}\n//           className={classes.form}\n//         >\n//           <Grid container spacing={2} alignItems=\"center\">\n//             <Grid item xs={12} sm={8}>\n//               <TextField\n//                 label=\"Enter city or coordinates\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={location}\n//                 onChange={(e) => setLocation(e.target.value)}\n//               />\n//             </Grid>\n//             <Grid item xs={12} sm={4}>\n//               <Button\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 type=\"submit\"\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Get Weather\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={handleSaveLocation}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Save Location\n//               </Button>\n//             </Grid>\n//             <Grid item xs={12} sm={6}>\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"primary\"\n//                 onClick={toggleTemperatureUnit}\n//                 fullWidth\n//                 className={classes.button}\n//               >\n//                 Toggle Temperature Unit ({temperatureUnit})\n//               </Button>\n//             </Grid>\n//           </Grid>\n//         </form>\n//         {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n//         {loading && (\n//           <div className={classes.loadingIndicator}>\n//             <CircularProgress />\n//           </div>\n//         )}\n//         {currentWeather && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n//             <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         )}\n//         {forecast && (\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n//             <Grid container spacing={2} justify=\"center\">\n//               {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n//                 <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n//                   <div className={classes.weatherItem}>\n//                     <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n//                     <Typography align=\"center\">{date}</Typography>\n//                     <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n//                     <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n//                   </div>\n//                 </Grid>\n//               ))}\n//             </Grid>\n//           </div>\n//         )}\n//       </Paper>\n//       <Paper elevation={3} className={classes.savedLocationsContainer}>\n//         <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n//         <Grid container spacing={2} justify=\"center\">\n//           {savedLocations.map((savedLocation, index) => (\n//             <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n//               <Button\n//                 variant=\"outlined\"\n//                 onClick={() => handleViewSavedLocation(savedLocation)}\n//                 fullWidth\n//                 className={classes.savedLocationButton}\n//               >\n//                 {savedLocation}\n//               </Button>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, TextField, Button, Typography, makeStyles, Grid, CircularProgress, Paper } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(4),\n    backgroundColor: '#f0f3f3',\n    borderRadius: theme.spacing(2),\n  },\n  form: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center',\n  },\n  textField: {\n    marginRight: theme.spacing(2),\n    flex: 1,\n  },\n  button: {\n    marginLeft: theme.spacing(2),\n  },\n  weatherContainer: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(3),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n  },\n  weatherItem: {\n    padding: theme.spacing(2),\n    border: '2px solid #ccc',\n    borderRadius: theme.spacing(1),\n    backgroundColor: '#f9f9f9',\n    marginBottom: theme.spacing(2),\n  },\n  loadingIndicator: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(4),\n  },\n  savedLocationsContainer: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2),\n    borderRadius: theme.spacing(2),\n    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n  },\n  savedLocationButton: {\n    marginRight: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n}));\n\nconst WeatherApp = () => {\n  const classes = useStyles();\n  const [location, setLocation] = useState('');\n  const [forecast, setForecast] = useState(null);\n  const [error, setError] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n  const [savedLocations, setSavedLocations] = useState([]);\n\n  const WeatherApp = () => {\n    const classes = useStyles();\n    const [location, setLocation] = useState('');\n    const [forecast, setForecast] = useState(null);\n    const [error, setError] = useState('');\n    const [currentWeather, setCurrentWeather] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [temperatureUnit, setTemperatureUnit] = useState('Celsius');\n    const [savedLocations, setSavedLocations] = useState([]);\n  \n    useEffect(() => {\n      // Load saved locations from local storage when component mounts\n      const savedLocationsFromStorage = localStorage.getItem('savedLocations');\n      if (savedLocationsFromStorage) {\n        setSavedLocations(JSON.parse(savedLocationsFromStorage));\n      }\n    }, []);\n  \n    useEffect(() => {\n      // Save updated saved locations to local storage whenever it changes\n      localStorage.setItem('savedLocations', JSON.stringify(savedLocations));\n    }, [savedLocations]);\n  \n    const fetchWeatherData = async (location) => {\n      if (!location.trim()) {\n        setError('Please enter a location.');\n        return;\n      }\n  \n      try {\n        setLoading(true);\n        const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n        setCurrentWeather(response.data.currentWeather);\n        setForecast(response.data.forecast);\n        setError('');\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n        setError('Failed to fetch weather data. Please try again.');\n        setLoading(false);\n      }\n    };\n  \n    const fetchCurrentLocationWeather = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async (position) => {\n          const { latitude, longitude } = position.coords;\n          const location = `${latitude},${longitude}`;\n          await fetchWeatherData(location);\n        }, (error) => {\n          console.error('Error getting current location:', error);\n          setError('Failed to get current location. Please enter a location manually.');\n          setLoading(false);\n        });\n      } else {\n        setError('Geolocation is not supported by this browser.');\n      }\n    };\n  \n    const handleFetchCurrentLocationWeather = async () => {\n      setLoading(true);\n      await fetchCurrentLocationWeather();\n    };\n  \n\n  const handleSaveLocation = () => {\n    // Save the current location to the list of saved locations\n    if (location.trim() && !savedLocations.includes(location.trim())) {\n      setSavedLocations([...savedLocations, location.trim()]);\n    }\n  };\n\n  const handleViewSavedLocation = async (savedLocation) => {\n    // Fetch weather data for the selected saved location\n    setLocation(savedLocation);\n    await fetchWeatherData();\n  };\n\n  const kelvinToCelsius = (kelvin) => {\n    return kelvin - 273.15;\n  };\n\n  const kelvinToFahrenheit = (kelvin) => {\n    return (kelvin * 9) / 5 - 459.67;\n  };\n\n  const toggleTemperatureUnit = () => {\n    setTemperatureUnit(prevUnit => prevUnit === 'Celsius' ? 'Fahrenheit' : 'Celsius');\n  };\n\n  const aggregateDailyTemperatures = (list) => {\n    const dailyTemperatures = {};\n\n    // Loop through the forecast data\n    list.forEach((item) => {\n      const forecastDate = new Date(item.dt * 1000);\n      const dateKey = forecastDate.toISOString().split('T')[0]; // Extract date without time\n\n      // Check if the date key exists in the dailyTemperatures object\n      if (!dailyTemperatures[dateKey]) {\n        // If not, initialize an object for the date\n        dailyTemperatures[dateKey] = {\n          max: -Infinity, // Initialize max temperature to negative infinity\n          min: Infinity, // Initialize min temperature to positive infinity\n        };\n      }\n\n      // Update max temperature if current temperature is higher\n      if (item.main.temp_max > dailyTemperatures[dateKey].max) {\n        dailyTemperatures[dateKey].max = item.main.temp_max;\n      }\n\n      // Update min temperature if current temperature is lower\n      if (item.main.temp_min < dailyTemperatures[dateKey].min) {\n        dailyTemperatures[dateKey].min = item.main.temp_min;\n      }\n    });\n\n    return dailyTemperatures;\n  };\n\n  return (\n    <Container maxWidth=\"md\" className={classes.root}>\n      <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n      <Paper elevation={3} className={classes.weatherContainer}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            fetchWeatherData();\n          }}\n          className={classes.form}\n        >\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} sm={8}>\n              <TextField\n                label=\"Enter city or coordinates\"\n                variant=\"outlined\"\n                fullWidth\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                fullWidth\n                className={classes.button}\n              >\n                Get Weather\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleSaveLocation}\n                fullWidth\n                className={classes.button}\n              >\n                Save Location\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={toggleTemperatureUnit}\n                fullWidth\n                className={classes.button}\n              >\n                Toggle Temperature Unit ({temperatureUnit})\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n        {error && <Typography color=\"error\" align=\"center\">{error}</Typography>}\n        {loading && (\n          <div className={classes.loadingIndicator}>\n            <CircularProgress />\n          </div>\n        )}\n        {currentWeather && (\n          <div className={classes.weatherItem}>\n            <Typography align=\"center\" variant=\"h5\">Current Weather</Typography>\n            <Typography align=\"center\">Temperature: {temperatureUnit === 'Celsius' ? kelvinToCelsius(currentWeather.main.temp).toFixed(2) + '°C' : kelvinToFahrenheit(currentWeather.main.temp).toFixed(2) + '°F'}</Typography>\n            <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n          </div>\n        )}\n        {forecast && (\n          <div className={classes.weatherItem}>\n            <Typography align=\"center\" variant=\"h5\">5-Day Weather Forecast</Typography>\n            <Grid container spacing={2} justify=\"center\">\n              {Object.entries(aggregateDailyTemperatures(forecast.list)).map(([date, temperatures]) => (\n                <Grid item key={date} xs={12} sm={6} md={4} lg={3}>\n                  <div className={classes.weatherItem}>\n                    <Typography align=\"center\" variant=\"h6\">{new Date(date).toLocaleDateString('en-US', { weekday: 'short' })}</Typography>\n                    <Typography align=\"center\">{date}</Typography>\n                    <Typography align=\"center\">Max: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.max).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.max).toFixed(2) + '°F'}</Typography>\n                    <Typography align=\"center\">Min: {temperatureUnit === 'Celsius' ? kelvinToCelsius(temperatures.min).toFixed(2) + '°C' : kelvinToFahrenheit(temperatures.min).toFixed(2) + '°F'}</Typography>\n                  </div>\n                </Grid>\n              ))}\n            </Grid>\n          </div>\n        )}\n      </Paper>\n      <Paper elevation={3} className={classes.savedLocationsContainer}>\n        <Typography variant=\"h5\" gutterBottom align=\"center\">Saved Locations</Typography>\n        <Grid container spacing={2} justify=\"center\">\n          {savedLocations.map((savedLocation, index) => (\n            <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n              <Button\n                variant=\"outlined\"\n                onClick={() => handleViewSavedLocation(savedLocation)}\n                fullWidth\n                className={classes.savedLocationButton}\n              >\n                {savedLocation}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n    </Container>\n  );\n};\n}\n export default WeatherApp;\n\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}