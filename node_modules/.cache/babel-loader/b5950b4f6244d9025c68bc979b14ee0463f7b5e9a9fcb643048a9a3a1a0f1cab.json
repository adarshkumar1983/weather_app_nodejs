{"ast":null,"code":"// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   form: {\n//     marginTop: theme.spacing(2),\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//   },\n//   weatherItem: {\n//     marginBottom: theme.spacing(2),\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n\n//   const fetchWeatherData = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//     }\n//   };\n\n//   // Function to convert temperature from Kelvin to Celsius\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   return (\n//     <Container maxWidth=\"sm\">\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <form\n//         onSubmit={(e) => {\n//           e.preventDefault();\n//           fetchWeatherData();\n//         }}\n//         className={classes.form}\n//       >\n//         <TextField\n//           label=\"Enter city or coordinates\"\n//           variant=\"outlined\"\n//           fullWidth\n//           className={classes.textField}\n//           value={location}\n//           onChange={(e) => setLocation(e.target.value)}\n//         />\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           type=\"submit\"\n//           className={classes.button}\n//         >\n//           Get Weather\n//         </Button>\n//       </form>\n//       {error && <Typography color=\"error\" align=\"center\" className={classes.weatherItem}>{error}</Typography>}\n//       {currentWeather && (\n//         <div className={classes.weatherContainer}>\n//           <Typography variant=\"h5\" gutterBottom align=\"center\">Current Weather</Typography>\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\">Temperature: {kelvinToCelsius(currentWeather.main.temp).toFixed(2)}째C</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         </div>\n//       )}\n//       {forecast && (\n//         <div className={classes.weatherContainer}>\n//           <Typography variant=\"h5\" gutterBottom align=\"center\">5-Day Weather Forecast</Typography>\n//           {forecast.list.map((day, index) => (\n//             <div key={index} className={classes.weatherItem}>\n//               <Typography align=\"center\">Date: {new Date(day.dt * 1000).toLocaleDateString()}</Typography>\n//               <Typography align=\"center\">Temperature: {kelvinToCelsius(day.main.temp).toFixed(2)}째C</Typography>\n//               <Typography align=\"center\">Description: {day.weather[0].description}</Typography>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;","map":{"version":3,"names":[],"sources":["/Users/adarshkumar/weather-app/src/components/WeatherComponent.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { Container, TextField, Button, Typography, makeStyles } from '@material-ui/core';\n\n// const useStyles = makeStyles((theme) => ({\n//   form: {\n//     marginTop: theme.spacing(2),\n//     marginBottom: theme.spacing(2),\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   textField: {\n//     marginRight: theme.spacing(2),\n//     flex: 1,\n//   },\n//   button: {\n//     marginLeft: theme.spacing(2),\n//   },\n//   weatherContainer: {\n//     marginTop: theme.spacing(4),\n//   },\n//   weatherItem: {\n//     marginBottom: theme.spacing(2),\n//   },\n// }));\n\n// const WeatherApp = () => {\n//   const classes = useStyles();\n//   const [location, setLocation] = useState('');\n//   const [currentWeather, setCurrentWeather] = useState(null);\n//   const [forecast, setForecast] = useState(null);\n//   const [error, setError] = useState('');\n\n//   const fetchWeatherData = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:5001/weather?location=${location}`);\n//       setCurrentWeather(response.data.currentWeather);\n//       setForecast(response.data.forecast);\n//       setError('');\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//       setError('Failed to fetch weather data. Please try again.');\n//     }\n//   };\n\n//   // Function to convert temperature from Kelvin to Celsius\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   return (\n//     <Container maxWidth=\"sm\">\n//       <Typography variant=\"h3\" gutterBottom align=\"center\">Weather App</Typography>\n//       <form\n//         onSubmit={(e) => {\n//           e.preventDefault();\n//           fetchWeatherData();\n//         }}\n//         className={classes.form}\n//       >\n//         <TextField\n//           label=\"Enter city or coordinates\"\n//           variant=\"outlined\"\n//           fullWidth\n//           className={classes.textField}\n//           value={location}\n//           onChange={(e) => setLocation(e.target.value)}\n//         />\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           type=\"submit\"\n//           className={classes.button}\n//         >\n//           Get Weather\n//         </Button>\n//       </form>\n//       {error && <Typography color=\"error\" align=\"center\" className={classes.weatherItem}>{error}</Typography>}\n//       {currentWeather && (\n//         <div className={classes.weatherContainer}>\n//           <Typography variant=\"h5\" gutterBottom align=\"center\">Current Weather</Typography>\n//           <div className={classes.weatherItem}>\n//             <Typography align=\"center\">Temperature: {kelvinToCelsius(currentWeather.main.temp).toFixed(2)}째C</Typography>\n//             <Typography align=\"center\">Description: {currentWeather.weather[0].description}</Typography>\n//           </div>\n//         </div>\n//       )}\n//       {forecast && (\n//         <div className={classes.weatherContainer}>\n//           <Typography variant=\"h5\" gutterBottom align=\"center\">5-Day Weather Forecast</Typography>\n//           {forecast.list.map((day, index) => (\n//             <div key={index} className={classes.weatherItem}>\n//               <Typography align=\"center\">Date: {new Date(day.dt * 1000).toLocaleDateString()}</Typography>\n//               <Typography align=\"center\">Temperature: {kelvinToCelsius(day.main.temp).toFixed(2)}째C</Typography>\n//               <Typography align=\"center\">Description: {day.weather[0].description}</Typography>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default WeatherApp;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}